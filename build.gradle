/*
 * Copyright 2021 Arunkumar
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  apply from: "constants.gradle"
  repositories {
    google()
    jcenter()
  }
  dependencies {
    classpath "com.android.tools.build:gradle:$agpVersion"
    classpath deps.kotlinGradlePlugin
    classpath deps.dokka
  }
}

plugins {
  id "scabbard.gradle" version "0.5.0"
}

scabbard {
  enabled true
  fullBindingGraphValidation false
  outputFormat "svg"
}

apply from: "gradle/local-properties.gradle"

allprojects { project ->
  group = groupId

  repositories {
    google()
    jcenter()
  }

  configurations.configureEach {
    resolutionStrategy {
      cacheChangingModulesFor 0, "seconds"
    }
  }
}

def sampleAppName = "sample-app"
def isSnapshot = project.hasProperty("snapshot")

subprojects { subproject ->
  apply from: "../constants.gradle"
  if (subproject.name != sampleAppName) {
    subproject.ext.artifact = subproject.name
    subproject.version = isSnapshot ? "master-SNAPSHOT" : subproject.ext.moduleVersions[subproject.name]
    apply from: "../libraryModule.gradle"
    apply from: "../publishing.gradle"
  }
}

afterEvaluate {
  // Sample project
  /* def sampleProject = subprojects.find { it.name == sampleAppName }
   def baseModuleDependencies = subprojects
       .findAll { it.name != sampleAppName }
       .collect { "$group:${it.ext.artifact}:${it.version}" }

   sampleProject.pluginManager.withPlugin("com.android.application") {
     sampleProject.afterEvaluate {
       baseModuleDependencies.forEach { moduleDependency ->
         sampleProject.dependencies.add("localImplementation", project(":${moduleDependency.split(":")[1]}"))
         sampleProject.dependencies.add("remoteImplementation", moduleDependency)
       }
     }
   }
   *//*if (sampleProject.hasProperty("localBuild")) {
     sampleProject.configurations.configureEach {
       resolutionStrategy {
         dependencySubstitution {
           baseModuleDependencies.forEach { moduleDependency ->
             substitute module(moduleDependency) with project(":${moduleDependency.split(":")[1]}")
           }
         }
       }
     }
   }*/
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
